#!/usr/bin/env bash
# SOURCE: https://github.com/ahmetsait/toolgit/blob/main/git-delete-gone-branches
# Modified by me

app_name="$(basename "${BASH_SOURCE[0]}")"

print_help() {
    expand -t 4 <<EOF
Usage:
	$app_name
		Delete local branches that no longer exist on remote.

Options:
    -n, --dry-run
        Print what would be deleted without deleting it
	-h, --help
		Show this help information and exit.
EOF
}

dry_run=0

while [[ $# -gt 0 ]]; do
    case "$1" in
    -n | --dry-run)
        dry_run=1
        shift
        ;;
    -h | --help)
        print_help
        exit 0
        ;;
    -*)
        echo "$app_name: [Error] Unknown option: $1" >&2
        exit 1
        ;;
    *)
        echo "$app_name: [Error] Unexpected argument: $1" >&2
        exit 1
        ;;
    esac
done

git rev-parse --git-dir >/dev/null || exit $?

git fetch --all --prune &>/dev/null

current_branch="$(git rev-parse --abbrev-ref HEAD)"
main_branch="$(git main-branch)"

for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'); do
    if [[ $branch == "$current_branch" ]]; then
        if [[ $branch != "$main_branch" ]]; then
            if ! git is-worktree-clean; then
                echo "$app_name: [Error] Cannot delete current branch: Working tree has changes." >&2
                exit 1
            fi
            git switch "$main_branch"
            echo "Deleting ${branch}"
            if [[ -z "${dry_run}" ]]; then
                git branch -D "$branch"
            fi
        else
            echo "$app_name: [Error] Cannot delete main branch '$main_branch'." >&2
        fi
    else
        echo "Deleting ${branch}"
        if [[ -z "${dry_run}" ]]; then
            git branch -D "$branch"
        fi
    fi
done
